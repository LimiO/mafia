// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/proto/connection/connection.proto

package mafia_connection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	game "mafia/pkg/proto/game"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaServerClient is the client API for MafiaServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaServerClient interface {
	Connect(ctx context.Context, in *UserJoinRequest, opts ...grpc.CallOption) (MafiaServer_ConnectClient, error)
	ListParticipants(ctx context.Context, in *ListParticipantsRequest, opts ...grpc.CallOption) (*ListParticipantsResponse, error)
	VoteBan(ctx context.Context, in *game.VoteBanRequest, opts ...grpc.CallOption) (*game.VoteBanResponse, error)
	Chat(ctx context.Context, in *game.ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	End(ctx context.Context, in *game.EndRequest, opts ...grpc.CallOption) (*game.EndResponse, error)
	Commit(ctx context.Context, in *game.CommitRequest, opts ...grpc.CallOption) (*game.CommitResponse, error)
	Publish(ctx context.Context, in *game.PublishRequest, opts ...grpc.CallOption) (*game.PublishResponse, error)
}

type mafiaServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaServerClient(cc grpc.ClientConnInterface) MafiaServerClient {
	return &mafiaServerClient{cc}
}

func (c *mafiaServerClient) Connect(ctx context.Context, in *UserJoinRequest, opts ...grpc.CallOption) (MafiaServer_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &MafiaServer_ServiceDesc.Streams[0], "/connection.MafiaServer/connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaServerConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MafiaServer_ConnectClient interface {
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type mafiaServerConnectClient struct {
	grpc.ClientStream
}

func (x *mafiaServerConnectClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaServerClient) ListParticipants(ctx context.Context, in *ListParticipantsRequest, opts ...grpc.CallOption) (*ListParticipantsResponse, error) {
	out := new(ListParticipantsResponse)
	err := c.cc.Invoke(ctx, "/connection.MafiaServer/listParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServerClient) VoteBan(ctx context.Context, in *game.VoteBanRequest, opts ...grpc.CallOption) (*game.VoteBanResponse, error) {
	out := new(game.VoteBanResponse)
	err := c.cc.Invoke(ctx, "/connection.MafiaServer/voteBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServerClient) Chat(ctx context.Context, in *game.ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/connection.MafiaServer/chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServerClient) End(ctx context.Context, in *game.EndRequest, opts ...grpc.CallOption) (*game.EndResponse, error) {
	out := new(game.EndResponse)
	err := c.cc.Invoke(ctx, "/connection.MafiaServer/end", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServerClient) Commit(ctx context.Context, in *game.CommitRequest, opts ...grpc.CallOption) (*game.CommitResponse, error) {
	out := new(game.CommitResponse)
	err := c.cc.Invoke(ctx, "/connection.MafiaServer/commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServerClient) Publish(ctx context.Context, in *game.PublishRequest, opts ...grpc.CallOption) (*game.PublishResponse, error) {
	out := new(game.PublishResponse)
	err := c.cc.Invoke(ctx, "/connection.MafiaServer/publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MafiaServerServer is the server API for MafiaServer service.
// All implementations must embed UnimplementedMafiaServerServer
// for forward compatibility
type MafiaServerServer interface {
	Connect(*UserJoinRequest, MafiaServer_ConnectServer) error
	ListParticipants(context.Context, *ListParticipantsRequest) (*ListParticipantsResponse, error)
	VoteBan(context.Context, *game.VoteBanRequest) (*game.VoteBanResponse, error)
	Chat(context.Context, *game.ChatRequest) (*ChatResponse, error)
	End(context.Context, *game.EndRequest) (*game.EndResponse, error)
	Commit(context.Context, *game.CommitRequest) (*game.CommitResponse, error)
	Publish(context.Context, *game.PublishRequest) (*game.PublishResponse, error)
	mustEmbedUnimplementedMafiaServerServer()
}

// UnimplementedMafiaServerServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServerServer struct {
}

func (UnimplementedMafiaServerServer) Connect(*UserJoinRequest, MafiaServer_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedMafiaServerServer) ListParticipants(context.Context, *ListParticipantsRequest) (*ListParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParticipants not implemented")
}
func (UnimplementedMafiaServerServer) VoteBan(context.Context, *game.VoteBanRequest) (*game.VoteBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBan not implemented")
}
func (UnimplementedMafiaServerServer) Chat(context.Context, *game.ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedMafiaServerServer) End(context.Context, *game.EndRequest) (*game.EndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method End not implemented")
}
func (UnimplementedMafiaServerServer) Commit(context.Context, *game.CommitRequest) (*game.CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedMafiaServerServer) Publish(context.Context, *game.PublishRequest) (*game.PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMafiaServerServer) mustEmbedUnimplementedMafiaServerServer() {}

// UnsafeMafiaServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServerServer will
// result in compilation errors.
type UnsafeMafiaServerServer interface {
	mustEmbedUnimplementedMafiaServerServer()
}

func RegisterMafiaServerServer(s grpc.ServiceRegistrar, srv MafiaServerServer) {
	s.RegisterService(&MafiaServer_ServiceDesc, srv)
}

func _MafiaServer_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserJoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServerServer).Connect(m, &mafiaServerConnectServer{stream})
}

type MafiaServer_ConnectServer interface {
	Send(*ServerResponse) error
	grpc.ServerStream
}

type mafiaServerConnectServer struct {
	grpc.ServerStream
}

func (x *mafiaServerConnectServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MafiaServer_ListParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServerServer).ListParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.MafiaServer/listParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServerServer).ListParticipants(ctx, req.(*ListParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaServer_VoteBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.VoteBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServerServer).VoteBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.MafiaServer/voteBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServerServer).VoteBan(ctx, req.(*game.VoteBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaServer_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServerServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.MafiaServer/chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServerServer).Chat(ctx, req.(*game.ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaServer_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.EndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServerServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.MafiaServer/end",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServerServer).End(ctx, req.(*game.EndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaServer_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.MafiaServer/commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServerServer).Commit(ctx, req.(*game.CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaServer_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(game.PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServerServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.MafiaServer/publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServerServer).Publish(ctx, req.(*game.PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MafiaServer_ServiceDesc is the grpc.ServiceDesc for MafiaServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MafiaServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connection.MafiaServer",
	HandlerType: (*MafiaServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listParticipants",
			Handler:    _MafiaServer_ListParticipants_Handler,
		},
		{
			MethodName: "voteBan",
			Handler:    _MafiaServer_VoteBan_Handler,
		},
		{
			MethodName: "chat",
			Handler:    _MafiaServer_Chat_Handler,
		},
		{
			MethodName: "end",
			Handler:    _MafiaServer_End_Handler,
		},
		{
			MethodName: "commit",
			Handler:    _MafiaServer_Commit_Handler,
		},
		{
			MethodName: "publish",
			Handler:    _MafiaServer_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "connect",
			Handler:       _MafiaServer_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/connection/connection.proto",
}
